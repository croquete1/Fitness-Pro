import type { ClientSession, SessionRequest } from '@/lib/sessions/types';

function addMinutes(base: Date, minutes: number) {
  return new Date(base.getTime() + minutes * 60_000);
}

function iso(date: Date) {
  return date.toISOString();
}

const TRAINERS = [
  { id: 'pt-ana', name: 'Ana Ribeiro', email: 'ana.ribeiro@fitness.pro' },
  { id: 'pt-daniel', name: 'Daniel Sousa', email: 'daniel.sousa@fitness.pro' },
  { id: 'pt-ines', name: 'Inês Pires', email: 'ines.pires@fitness.pro' },
];

export function getFallbackClientSessions(): ClientSession[] {
  const now = new Date();
  const base = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 8, 30, 0, 0);
  return [
    {
      id: 'sess-8001',
      startISO: iso(addMinutes(base, -7 * 24 * 60)),
      endISO: iso(addMinutes(base, -7 * 24 * 60 + 60)),
      durationMin: 60,
      location: 'Estúdio Neo A',
      notes: 'Bloco de força com foco em membros inferiores.',
      trainerId: TRAINERS[0].id,
      trainerName: TRAINERS[0].name,
      trainerEmail: TRAINERS[0].email,
      status: 'completed',
      attendanceStatus: 'completed',
      attendanceAt: iso(addMinutes(base, -7 * 24 * 60 + 65)),
    },
    {
      id: 'sess-8002',
      startISO: iso(addMinutes(base, -5 * 24 * 60)),
      endISO: iso(addMinutes(base, -5 * 24 * 60 + 45)),
      durationMin: 45,
      location: 'Box HIIT',
      notes: 'Sessão metabólica + core.',
      trainerId: TRAINERS[1].id,
      trainerName: TRAINERS[1].name,
      trainerEmail: TRAINERS[1].email,
      status: 'completed',
      attendanceStatus: 'completed',
      attendanceAt: iso(addMinutes(base, -5 * 24 * 60 + 50)),
    },
    {
      id: 'sess-8003',
      startISO: iso(addMinutes(base, -3 * 24 * 60)),
      endISO: iso(addMinutes(base, -3 * 24 * 60 + 60)),
      durationMin: 60,
      location: 'Piscina coberta',
      notes: 'Treino de endurance para triatlo.',
      trainerId: TRAINERS[2].id,
      trainerName: TRAINERS[2].name,
      trainerEmail: TRAINERS[2].email,
      status: 'completed',
      attendanceStatus: 'completed',
      attendanceAt: iso(addMinutes(base, -3 * 24 * 60 + 65)),
    },
    {
      id: 'sess-8004',
      startISO: iso(addMinutes(base, -1 * 24 * 60)),
      endISO: iso(addMinutes(base, -1 * 24 * 60 + 45)),
      durationMin: 45,
      location: 'Estúdio Neo B',
      notes: 'Sessão cancelada devido a indisposição.',
      trainerId: TRAINERS[0].id,
      trainerName: TRAINERS[0].name,
      trainerEmail: TRAINERS[0].email,
      status: 'cancelled',
      attendanceStatus: 'cancelled',
      attendanceAt: iso(addMinutes(base, -1 * 24 * 60 - 30)),
    },
    {
      id: 'sess-8005',
      startISO: iso(addMinutes(base, -2 * 24 * 60)),
      endISO: iso(addMinutes(base, -2 * 24 * 60 + 30)),
      durationMin: 30,
      location: 'Ar livre - Parque da Cidade',
      notes: 'Sessão curta de mobilidade + corrida leve.',
      trainerId: TRAINERS[1].id,
      trainerName: TRAINERS[1].name,
      trainerEmail: TRAINERS[1].email,
      status: 'no_show',
      attendanceStatus: 'no_show',
      attendanceAt: iso(addMinutes(base, -2 * 24 * 60 + 10)),
    },
    {
      id: 'sess-8006',
      startISO: iso(addMinutes(base, 6 * 60)),
      endISO: iso(addMinutes(base, 6 * 60 + 60)),
      durationMin: 60,
      location: 'Ginásio principal',
      notes: 'Avaliação trimestral + novos objetivos.',
      trainerId: TRAINERS[0].id,
      trainerName: TRAINERS[0].name,
      trainerEmail: TRAINERS[0].email,
      status: 'scheduled',
      attendanceStatus: 'pending',
      attendanceAt: null,
    },
    {
      id: 'sess-8007',
      startISO: iso(addMinutes(base, 2 * 24 * 60)),
      endISO: iso(addMinutes(base, 2 * 24 * 60 + 45)),
      durationMin: 45,
      location: 'Box HIIT',
      notes: 'Ciclo cardio intenso + potência.',
      trainerId: TRAINERS[1].id,
      trainerName: TRAINERS[1].name,
      trainerEmail: TRAINERS[1].email,
      status: 'scheduled',
      attendanceStatus: 'pending',
      attendanceAt: null,
    },
    {
      id: 'sess-8008',
      startISO: iso(addMinutes(base, 3 * 24 * 60 + 120)),
      endISO: iso(addMinutes(base, 3 * 24 * 60 + 180)),
      durationMin: 60,
      location: 'Piscina coberta',
      notes: 'Técnica de nado + força complementar.',
      trainerId: TRAINERS[2].id,
      trainerName: TRAINERS[2].name,
      trainerEmail: TRAINERS[2].email,
      status: 'scheduled',
      attendanceStatus: 'pending',
      attendanceAt: null,
    },
    {
      id: 'sess-8009',
      startISO: iso(addMinutes(base, 5 * 24 * 60)),
      endISO: iso(addMinutes(base, 5 * 24 * 60 + 75)),
      durationMin: 75,
      location: 'Estúdio Neo A',
      notes: 'Sessão premium com foco em força máxima.',
      trainerId: TRAINERS[0].id,
      trainerName: TRAINERS[0].name,
      trainerEmail: TRAINERS[0].email,
      status: 'confirmed',
      attendanceStatus: 'confirmed',
      attendanceAt: null,
    },
    {
      id: 'sess-8010',
      startISO: iso(addMinutes(base, 7 * 24 * 60)),
      endISO: iso(addMinutes(base, 7 * 24 * 60 + 60)),
      durationMin: 60,
      location: 'Ar livre - Praia da Luz',
      notes: 'Treino funcional ao ar livre.',
      trainerId: TRAINERS[2].id,
      trainerName: TRAINERS[2].name,
      trainerEmail: TRAINERS[2].email,
      status: 'scheduled',
      attendanceStatus: 'pending',
      attendanceAt: null,
    },
  ];
}

export function getFallbackSessionRequests(): SessionRequest[] {
  const now = new Date();
  return [
    {
      id: 'req-9101',
      sessionId: null,
      status: 'pending',
      requestedStart: iso(addMinutes(now, 5 * 60)),
      requestedEnd: iso(addMinutes(now, 5 * 60 + 60)),
      proposedStart: null,
      proposedEnd: null,
      message: 'Gostava de focar na corrida para a meia maratona.',
      trainerNote: null,
      rescheduleNote: null,
      createdAt: iso(addMinutes(now, -60)),
      updatedAt: iso(addMinutes(now, -60)),
      respondedAt: null,
      proposedAt: null,
      trainer: TRAINERS[1],
    },
    {
      id: 'req-9102',
      sessionId: 'sess-8007',
      status: 'accepted',
      requestedStart: iso(addMinutes(now, -2 * 24 * 60)),
      requestedEnd: iso(addMinutes(now, -2 * 24 * 60 + 45)),
      proposedStart: iso(addMinutes(now, 2 * 24 * 60)),
      proposedEnd: iso(addMinutes(now, 2 * 24 * 60 + 45)),
      message: 'Reagendar para o próximo sábado de manhã.',
      trainerNote: 'Confirmado — sessão movida para sábado às 9h.',
      rescheduleNote: null,
      createdAt: iso(addMinutes(now, -2 * 24 * 60 - 120)),
      updatedAt: iso(addMinutes(now, -2 * 24 * 60 - 60)),
      respondedAt: iso(addMinutes(now, -2 * 24 * 60 - 60)),
      proposedAt: iso(addMinutes(now, -2 * 24 * 60 - 90)),
      trainer: TRAINERS[0],
    },
    {
      id: 'req-9103',
      sessionId: null,
      status: 'reschedule_pending',
      requestedStart: iso(addMinutes(now, 4 * 24 * 60)),
      requestedEnd: iso(addMinutes(now, 4 * 24 * 60 + 60)),
      proposedStart: iso(addMinutes(now, 4 * 24 * 60 + 120)),
      proposedEnd: iso(addMinutes(now, 4 * 24 * 60 + 180)),
      message: 'Preciso de ajustar por causa do trabalho.',
      trainerNote: 'Posso sugerir mais tarde ao final do dia?',
      rescheduleNote: null,
      createdAt: iso(addMinutes(now, -6 * 60)),
      updatedAt: iso(addMinutes(now, -3 * 60)),
      respondedAt: null,
      proposedAt: iso(addMinutes(now, -2 * 60)),
      trainer: TRAINERS[2],
    },
    {
      id: 'req-9104',
      sessionId: 'sess-8004',
      status: 'declined',
      requestedStart: iso(addMinutes(now, -3 * 24 * 60)),
      requestedEnd: iso(addMinutes(now, -3 * 24 * 60 + 60)),
      proposedStart: null,
      proposedEnd: null,
      message: 'Podes abrir vaga extra para esta semana?',
      trainerNote: 'Sem disponibilidade esta semana — proponho próxima.',
      rescheduleNote: 'Cliente prefere manter para a próxima semana.',
      createdAt: iso(addMinutes(now, -3 * 24 * 60 - 120)),
      updatedAt: iso(addMinutes(now, -3 * 24 * 60 - 30)),
      respondedAt: iso(addMinutes(now, -3 * 24 * 60 - 30)),
      proposedAt: null,
      trainer: TRAINERS[1],
    },
  ];
}
