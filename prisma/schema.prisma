// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // pooled em runtime
  directUrl = env("DIRECT_URL")    // SEM pool para CLI (migrate/pull)
}

/** ===== ENUNS ===== */
enum Role {
  ADMIN
  TRAINER
  CLIENT
  @@map("Role")
}

enum Status {
  PENDING
  ACTIVE
  SUSPENDED
  @@map("UserStatus")
}

enum SessionStatus {
  pendente
  aceite
  recusada
  cancelada
  realizada
  @@map("SessionStatus")
}

/* ===== Enums para auditoria/planos ===== */
enum AuditKind {
  ACCOUNT_APPROVAL
  ACCOUNT_STATUS_CHANGE
  ACCOUNT_ROLE_CHANGE
}

enum PlanAction {
  CREATE
  UPDATE
  DELETE
}

/** ================= MODELOS ================= */
model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique @db.Citext
  name         String?
  passwordHash String   @map("password_hash")
  role         Role     @default(CLIENT)
  status       Status   @default(PENDING)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // sessões
  trainerSessions Session[] @relation("TrainerSessions")
  clientSessions  Session[] @relation("ClientSessions")

  // relação PT-Cliente (FALTAVA o lado oposto)
  trainerClientsAsTrainer TrainerClient[] @relation("TrainerClients_trainer")
  trainerClientsAsClient  TrainerClient[] @relation("TrainerClients_client")

  // planos
  trainingPlansAsTrainer TrainingPlan[] @relation("TrainingPlanTrainer")
  trainingPlansAsClient  TrainingPlan[] @relation("TrainingPlanClient")

  // auditoria
  auditLogs AuditLog[]

  // logs genéricos de alterações de planos
  planChangesAsTrainer PlanChangeLog[] @relation("PlanChangeTrainer")
  planChangesAsClient  PlanChangeLog[] @relation("PlanChangeClient")

  // autor de alterações de TrainingPlan (FALTAVA o lado oposto)
  trainingPlanChangesAuthored TrainingPlanChange[] @relation("TPCActor")

  @@index([role])
  @@index([status])
  @@map("users")
}

model Session {
  id          String        @id @default(uuid()) @db.Uuid
  trainerId   String        @map("trainer_id") @db.Uuid
  clientId    String        @map("client_id") @db.Uuid
  scheduledAt DateTime      @map("scheduled_at")
  status      SessionStatus @default(pendente)
  notes       String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  trainer User @relation("TrainerSessions", fields: [trainerId], references: [id])
  client  User @relation("ClientSessions", fields: [clientId], references: [id])

  @@index([trainerId], map: "sessions_trainer_idx")
  @@index([clientId], map: "sessions_client_idx")
  @@index([scheduledAt], map: "sessions_scheduled_idx")
  @@map("sessions")
}

model TrainerClient {
  id        String   @id @default(uuid()) @db.Uuid
  trainerId String   @db.Uuid @map("trainer_id")
  clientId  String   @db.Uuid @map("client_id")
  createdAt DateTime @default(now()) @map("created_at")

  trainer User @relation("TrainerClients_trainer", fields: [trainerId], references: [id])
  client  User @relation("TrainerClients_client",  fields: [clientId],  references: [id])

  @@unique([trainerId, clientId])
  @@index([trainerId])
  @@index([clientId])
  @@map("trainer_clients")
}

/* ===== AuditLog (compatível com tua tabela) ===== */
model AuditLog {
  id         String    @id @default(uuid()) @db.Uuid
  actorId    String?   @db.Uuid @map("actor_id")

  kind       AuditKind @default(ACCOUNT_STATUS_CHANGE)
  message    String    @map("action")
  target     String?
  targetId   String?   @map("target_id")
  targetType String?   @map("target_type")
  diff       Json?     @map("meta")
  ip         String?   @map("ip")
  userAgent  String?   @map("user_agent")

  createdAt  DateTime  @default(now()) @map("created_at")

  actor User? @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([kind, createdAt])
  @@index([targetType, targetId])
  @@map("audit_logs")
}

/* ===== Logs genéricos de alterações de planos ===== */
model PlanChangeLog {
  id        String     @id @default(uuid()) @db.Uuid
  planId    String
  trainerId String     @db.Uuid @map("trainer_id")
  clientId  String     @db.Uuid @map("client_id")
  action    PlanAction
  diff      Json?
  createdAt DateTime   @default(now()) @map("created_at")

  trainer   User       @relation("PlanChangeTrainer", fields: [trainerId], references: [id])
  client    User       @relation("PlanChangeClient",  fields: [clientId],  references: [id])

  @@index([planId, createdAt],    map: "plan_change_plan_idx")
  @@index([trainerId, createdAt], map: "plan_change_trainer_idx")
  @@index([clientId, createdAt],  map: "plan_change_client_idx")
  @@map("plan_change_logs")
}

model Notification {
  id           String   @id @default(uuid()) @db.Uuid
  title        String
  body         String?
  href         String?
  targetUserId String?  @db.Uuid @map("target_user_id")
  targetRole   Role?
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@index([targetUserId])
  @@index([targetRole])
  @@map("notifications")
}

/* ===== Tabela de planos (relações explícitas) ===== */
model TrainingPlan {
  id         String   @id @default(uuid()) @db.Uuid
  trainerId  String   @db.Uuid @map("trainer_id")
  clientId   String   @db.Uuid @map("client_id")
  title      String
  notes      String?
  exercises  Json
  status     String   @default("ACTIVE")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  trainer User @relation("TrainingPlanTrainer", fields: [trainerId], references: [id])
  client  User @relation("TrainingPlanClient",  fields: [clientId],  references: [id])

  changes TrainingPlanChange[]

  @@index([trainerId], map: "training_plans_trainer_idx")
  @@index([clientId],  map: "training_plans_client_idx")
  @@index([status],    map: "training_plans_status_idx")
  @@map("training_plans")
}

model TrainingPlanChange {
  id         String   @id @default(uuid()) @db.Uuid
  planId     String   @db.Uuid @map("plan_id")
  actorId    String?  @db.Uuid @map("actor_id")
  changeType String
  diff       Json?
  snapshot   Json?
  createdAt  DateTime @default(now()) @map("created_at")

  plan  TrainingPlan @relation(fields: [planId], references: [id])
  actor User?        @relation("TPCActor", fields: [actorId], references: [id]) // nome da relação adicionado

  @@index([planId],    map: "tpc_plan_idx")
  @@index([actorId],   map: "tpc_actor_idx")
  @@index([createdAt], map: "tpc_created_idx")
  @@map("training_plan_changes")
}
